<?php

use Drupal\commerce_product\Entity\Product;
use Drupal\commerce_pricelist\Entity\PricelistItem;
use Drupal\commerce_product\Entity\ProductVariation;
use Drupal\commerce_product\Entity\ProductAttributeValue;
use Drupal\taxonomy\Entity\Term;


 function getColorAttributeId($color_name)
  {
    // Use the entity type manager to query for ProductAttributeValue entities.
    $storage = \Drupal::entityTypeManager()->getStorage('commerce_product_attribute_value');
    $color_values = $storage->loadByProperties(['name' => $color_name]);

    if (!empty($color_values)) {
      // Return the first matching color value.
      return reset($color_values)->id();
    } else {
      // Create a new ProductAttributeValue entity for the color.
      $color = ProductAttributeValue::create([
        'attribute' => 'color', // Ensure this is the correct attribute machine name.
        'name' => $color_name,
      ]);
      $color->save();
      return $color->id();
    }
  }




  /**
   * Converts the input string to UTF-8 encoding, ensuring safe use and preventing character encoding issues.
   *
   * @param string $input The input string to be converted.
   * @return string The input string in UTF-8 encoding.
   */
  function sanitizeInput($input)
  {
    return mb_convert_encoding($input, 'UTF-8', 'auto');
  }




function custom_product_importer_cron() {
  // Getting CSV file path from config object's custom textfield field
  $config = \Drupal::config('custom_product_importer.settings');
  $value = $config->get('custom_textbox');
  $csv_path=$value;
  //  $csv_path = 'https://demoworksite.online/sites/default/files/product_data/dummy-data.csv';   


  $valid_csv_path = false;
  if (filter_var($csv_path, FILTER_VALIDATE_URL)) {
    if (pathinfo($csv_path, PATHINFO_EXTENSION) === 'csv') {
      $valid_csv_path = true;
    } else {
      $valid_csv_path = false;
    }
} elseif (file_exists($csv_path) && pathinfo($csv_path, PATHINFO_EXTENSION) === 'csv') {
    
  $valid_csv_path = true;
} else {
  $valid_csv_path = false;
}


if($valid_csv_path){

   // Initialize an empty array to store the product data
   $product_data = [];
   
   // Open the file for reading
   if (($handle = fopen($csv_path, 'r')) !== FALSE) {
     // Get the header row (optional)
     while (($row = fgetcsv($handle)) !== FALSE) {
      // Add each row of data to the $product_data array
      $product_data[] = $row;
    }

     // Close the file after reading
     fclose($handle);
   }

// Configuring batch operation for product updation in chunks
$batch = [
  'title' => 'Please wait, we are checking and updating commerce products...',
  'operations' => [],
  'finished' => 'custom_product_importer_batch_finished',
  'init_message' => t('Preparing to update commerce products.'),
];

//calling batchProcess for each chunk(1) of nodes
foreach (array_chunk($product_data, 1) as $chunk) {
  $batch['operations'][] = ['custom_product_importer_batch_process', [$chunk]];
}

batch_set($batch);
}

}






function custom_product_importer_batch_process($product_data, $context)
  {

    foreach ($product_data as $key  => $data) {
      $new_arr = [];
      foreach($data as $k=> $v){
      $new_arr[]= $v;
      }

      // Extracting data from CSV record
      $sku =  sanitizeInput($new_arr[0]);
      $article_group =  sanitizeInput($new_arr[1]);
      $merchandise_group =  sanitizeInput($new_arr[4]);
      $v_title =  sanitizeInput($new_arr[6]);
      $variation_title= $v_title;
      if(str_contains($v_title, ',,') || str_contains($v_title, ',') || str_contains($v_title, '.') || str_contains($v_title, '™') || str_contains($v_title, 'š') || str_contains($v_title, 'Ž') || str_contains($v_title, '+')){
        $variation_title= '"'.$v_title.'"';
      }else{
        $variation_title= $v_title;
      }

      $color =  sanitizeInput($new_arr[7]);
      $guise =  sanitizeInput($new_arr[10]);
      $weight_kg =  (float) sanitizeInput($new_arr[11]);
 
    

      $price_1 =  (float) sanitizeInput($new_arr[12]);
      $unit_1 =  (float) sanitizeInput($new_arr[13]);
   
      $price_2 =  (float) sanitizeInput($new_arr[14]);
      $unit_2 =  (float) sanitizeInput($new_arr[15]);


      $price_3 = (float) sanitizeInput($new_arr[16]);
      $unit_3 =  (float) sanitizeInput($new_arr[17]);

  
      $price_4 = (float) sanitizeInput($new_arr[18]);
      $unit_4 =  (float) sanitizeInput($new_arr[19]);

      
      $price_5 = (float) sanitizeInput($new_arr[20]);
      $unit_5 =  (float) sanitizeInput($new_arr[21]);

   

      $stock =  (float) sanitizeInput($new_arr[23]);
    
      $customs_tariff_number =  sanitizeInput($new_arr[24]);
// 



// Accessing product variation using sku
    $product_variation = \Drupal::entityTypeManager()
    ->getStorage('commerce_product_variation')
    ->loadByProperties(['sku' => $sku]);
  $product_variation = reset($product_variation); //loading variation

if ($product_variation) {
  $existing_product = $product_variation->getProduct(); //loading product using variation
}

      if (isset($existing_product) || !empty($existing_product)) {
        $product = $existing_product;
              if (empty($color)) {
                $product_variation->set('attribute_color', NULL);
              } else {
                $color_attribute_id =  getColorAttributeId($color);
                $product_variation->set('attribute_color', $color_attribute_id);
              }
  
              if($product_variation->get('title')->value != $variation_title){
              $product_variation->set('title', $variation_title);
              }
  
              $stock = ['stock' => ['value' => 0]];
   
                $product_variation->set('field_stock_level', [$stock]);

              $product_variation->save();


              // Checking and updating price
              $price_list = \Drupal::entityTypeManager()
              ->getStorage('commerce_pricelist')
              ->loadByProperties(['name' => 'Price table']);
              $pricelist = reset($price_list);
              
              for ($i = 1; $i != 6; $i++) {
                $unit_variable = ${'unit_' . $i}; // Equivalent to $unit_1, $unit_2, etc.
                $price_variable = ${'price_' . $i}; // Equivalent to $price_1, $price_2, etc.
    
                if (isset($unit_variable) && isset($price_variable)) {
                  $existing_price_item = \Drupal::entityTypeManager()
                    ->getStorage('commerce_pricelist_item')
                    ->loadByProperties([
                      'type' => 'commerce_product_variation',
                      'quantity' => $unit_variable,
                      'purchasable_entity' => $product_variation->id(),
                      'price_list_id' => $pricelist->id()
                    ]);
                    $existing_price_item_data = reset($existing_price_item);
  
                  if (!isset($existing_price_item) || empty($existing_price_item)) {
                    $price_item = PriceListItem::create([
                      'type' => 'commerce_product_variation',
                      'pricelist' => $pricelist->id(),
                      'quantity' => $unit_variable,
                      'purchasable_entity' => $product_variation->id(),
                      // 'purchasable_entity' => $variation->id(),
                      'price' => new \Drupal\commerce_price\Price($price_variable, 'EUR'),
                      'variation' => $product_variation->id(),
                      'price_list_id' => $pricelist->id()
                    ]);
                    $price_item->save();
                  }
                  else{
                     if($existing_price_item_data->get('price')->value != $price_variable){
                        $existing_price_item_data->set('price',
                        [
                          'number' => $price_variable,
                          'currency_code' => 'EUR',
                      ]
                      );
                        $existing_price_item_data->save();
                     } 
                  }
                  // Save the PricelistItem.
                  // $price_item->save();
                }
              }


      

        if(isset($stock) && $stock > 0) {
          $product->set('field_available_in_stock', 1);
        }
        else{
          $product->set('field_available_in_stock', 0);
        }

        if($product->get('field_article_group')->value != $article_group){
        $product->set('field_article_group', $article_group);
        }

        if($product->get('field_merchandise_group')->value != $merchandise_group){
        $product->set('field_merchandise_group', $merchandise_group);
        }

  
                 $product->set('field_guise', strtolower($guise));
  

        if($product->get('field_weight_kg')->value != $weight_kg){
        $product->set('field_weight_kg', $weight_kg);
        }

        if(!empty($customs_tariff_number)){
          if($product->get('field_customs_tariff_number')->value != $customs_tariff_number){
          $product->set('field_customs_tariff_number', $customs_tariff_number);
          }
          }
        $product->save();
     
      }
    }
    $context['message'] = t('Updating products...');
  
}


  /**
 * Finished callback for the batch process.
 */
function custom_product_importer_batch_finished($success, $results, $operations) {
  if ($success) {
    \Drupal::messenger()->addStatus(t('All products have been updating successfully.'));
  } else {
    \Drupal::messenger()->addError(t('An error occurred while importing products.'));
  }
}

